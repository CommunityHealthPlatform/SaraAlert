name: Tests

on: [push, workflow_dispatch]

jobs:
  test-model-controller:
    runs-on: ubuntu-18.04
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
    steps:
      - uses: actions/checkout@v2
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.3
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install Bundler
        run: gem install bundler
      - name: Install Yarn
        run: npm install yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Run Yarn Install
        run: yarn install --ignore-engines
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Run Bundle Install
        run: |
          bundle config path vendor/bundle
          bundle install
      - name: Setup Test Database Configuration
        run: |
          cp config/github-ci/github-database.yml config/database.yml
          mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -u root -proot -e 'CREATE DATABASE IF NOT EXISTS glyph_test;'
      - name: Run Rake Test
        run: bundle exec rake test
        env:
          JOB_RUN_EMAIL: foobar@example.com
          CI_SQL_PORT: ${{ job.services.mysql.ports['3306'] }}
          APP_IN_CI: true
      - uses: actions/upload-artifact@v1
        if: success()
        with:
          name: coverage-tests
          path: coverage/.resultset.json
  test-system-admin:
    runs-on: ubuntu-18.04
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
    steps:
      - uses: actions/checkout@v2
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.3
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '13.x'
      - name: Install Bundler
        run: gem install bundler
      - name: Install Yarn
        run: npm install yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Run Yarn Install
        run: yarn install --ignore-engines
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Run Bundle Install
        run: |
          bundle config path vendor/bundle
          bundle install
      - name: Setup Test Database Configuration
        run: |
          cp config/github-ci/github-database.yml config/database.yml
          mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -u root -proot -e 'CREATE DATABASE IF NOT EXISTS glyph_test;'
      - name: Run System Tests
        run: bundle exec rake test TEST=test/system/roles/admin/admin_test.rb
        env:
          CI_SQL_PORT: ${{ job.services.mysql.ports['3306'] }}
          APP_IN_CI: true
      - uses: actions/upload-artifact@v1
        if: success()
        with:
          name: coverage-admin
          path: coverage/.resultset.json
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: screenshots
          path: tmp/screenshots/
  compile-test-coverage:
    name: Display Test Coverage Results
    needs: [test-system-admin]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: github-artifacts
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.3
      - name: Install Bundler
        run: gem install bundler
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Run Bundle Install
        run: |
          bundle config path vendor/bundle
          bundle install
      - name: Collate coverage
        run: |
          bundle exec rake coverage:report
        env:
          APP_IN_CI: true
